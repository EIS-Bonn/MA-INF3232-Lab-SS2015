Phase: Negverb_in_Sentence
Input: Sentence Lookup Negaton2 verb
Options: control = appelt 
Rule: sentenceopinion
(
   {Sentence}
   
):sent
-->
{
	//get the annotation set  
  AnnotationSet annSet = bindings.get("sent");  
 
  //get the only annotation from the set  
  Annotation entityAnn = annSet.iterator().next();  
 
  AnnotationSet sentAS = inputAS.get("Sentence",  
        entityAnn.getStartNode().getOffset(),  
        entityAnn.getEndNode().getOffset());  
  List<Annotation> sents = new ArrayList<Annotation>(sentAS);  
  //if no tokens to match, do nothing  
  if (sents.isEmpty())  
     return;  
  Collections.sort(sents, new gate.util.OffsetComparator());  
 
  Annotation curToken=null;  
  for (int i=0; i < sents.size(); i++) {  
		curToken = sents.get(i);  

		//Calculate for Negetaion verb 

		AnnotationSet negationword = inputAS.get("negverb",  
				entityAnn.getStartNode().getOffset(),  
				entityAnn.getEndNode().getOffset());  
		List<Annotation> negword = new ArrayList<Annotation>(negationword);  
		//if no tokens to match, do nothing  
		if (negword.isEmpty())  
			return;  
		Collections.sort(negword, new gate.util.OffsetComparator()); 
		
		for (int j=0; j < 1; j++) {
			String a=(String) curToken.getFeatures().get("sentiment");
			
			if ("positive".equals(a))
				curToken.getFeatures().put("sentiment","negative" );
			else if ("negative".equals(a))
				curToken.getFeatures().put("sentiment","positive" );
			int Score1=(int) curToken.getFeatures().get("score" )*-1;
			curToken.getFeatures().put("score",Score1 );		
		}
	}

}
		