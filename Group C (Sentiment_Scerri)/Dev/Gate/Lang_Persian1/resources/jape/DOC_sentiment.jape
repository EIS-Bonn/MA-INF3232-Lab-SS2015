Phase: Sentence1
Input: paragraph
Options: control = appelt debug = true
Rule: txt_sentiment
(
   {paragraph}
   
):txt
-->
{
	//get the annotation set  
  AnnotationSet annSet = bindings.get("txt");  
 
  //get the only annotation from the set  
  Annotation entityAnn = annSet.iterator().next();  
 
  AnnotationSet sentAS = inputAS.get("Sentence",  
        entityAnn.getStartNode().getOffset(),  
        entityAnn.getEndNode().getOffset());  
  List<Annotation> sents = new ArrayList<Annotation>(sentAS);  
  //if no tokens to match, do nothing  
  if (sents.isEmpty())  
     return;  
  Collections.sort(sents, new gate.util.OffsetComparator());  
	
	int Score=0;
	int neg=0;
	int pos=0;
	String S="";
  
  for (int i=0; i < sents.size(); i++) {  
		
		Score=Score+(int) sents.get(i).getFeatures().get("score");
		S=(String) sents.get(i).getFeatures().get("sentiment");
		if (S=="negative")
			neg++;
		else if (S=="positive")
			pos++;		
	}

	FeatureMap features = Factory.newFeatureMap(); 
	if (pos>neg){
		features.put("Sentiment", "POSITIVE");
		doc.getFeatures().put("Sentiment", "POSITIVE");
		}
	else if (neg>pos){
		features.put("Sentiment", "NEGATIVE");
		doc.getFeatures().put("Sentiment", "NEGATIVE");
		}
	else {
		features.put("Sentiment", "NEUTRAL"); 
		doc.getFeatures().put("Sentiment", "NEUTRAL");
		}
	features.put("SCORE", Score); 
	outputAS.add(annSet.firstNode(), annSet.lastNode(), "SENTIMENT", features); 

		
}