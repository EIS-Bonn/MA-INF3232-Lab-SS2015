Phase: Sentence1
Input: Sentence Lookup Negaton2 verb
Options: control = appelt 
Rule: sentenceopinion
(
   {Sentence}
   
):sent
-->
{
	//get the annotation set  
  AnnotationSet annSet = bindings.get("sent");  
 
  //get the only annotation from the set  
  Annotation entityAnn = annSet.iterator().next();  
 
  AnnotationSet sentAS = inputAS.get("Sentence",  
        entityAnn.getStartNode().getOffset(),  
        entityAnn.getEndNode().getOffset());  
  List<Annotation> sents = new ArrayList<Annotation>(sentAS);  
  //if no tokens to match, do nothing  
  if (sents.isEmpty())  
     return;  
  Collections.sort(sents, new gate.util.OffsetComparator());  
 
  Annotation curToken=null;  
  for (int i=0; i < sents.size(); i++) {  
		curToken = sents.get(i);  
		
		// Calculate Count of Lookup + and - in every sentence
		AnnotationSet Lookups = inputAS.get("Lookup",  
				entityAnn.getStartNode().getOffset(),  
				entityAnn.getEndNode().getOffset());  
		List<Annotation> Looks = new ArrayList<Annotation>(Lookups);  
		//if no tokens to match, do nothing  
		if (Looks.isEmpty())  
			return;  
		Collections.sort(Looks, new gate.util.OffsetComparator()); 
		int neg=0;
		int pos=0;
		for (int j=0; j < Looks.size(); j++) {
		String a=(String) Looks.get(j).getFeatures().get("majorType");
		String b="neg3";
			if (a.compareTo(b)==1)
				neg++;
			else
				pos++;	
			//curToken.getFeatures().put("neg", a.compareTo(b));
		}
		curToken.getFeatures().put("neg", neg);
		curToken.getFeatures().put("pos", pos);
		
		
		
	}//for  
}

